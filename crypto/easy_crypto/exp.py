def NBITS(N):
    n1 = hex(N)[:]
    return len(n1)*4

def find_pq(d0,e,N):
    X = var('X')
    PR.<x> = PolynomialRing(Zmod(N))

    print '[ ] Thinking...'
    for k in xrange(1, e+1):
        results = solve_mod([e * d0 * X - k * X * (N - X + 1) + k * N == X], 2 ** known_bits)

        for m in results:
            f = x * 2 ** known_bits + ZZ(m[0])
            f = f.monic()
            roots = f.small_roots(X = 2 ** (NBITS(N) / 2 - known_bits), beta=0.3)

            if roots:
                x0 = roots[0]
                p = gcd(2 ** known_bits * x0 + ZZ(m[0]), N)
                print '[+] Found factorization!'
                return (ZZ(p),N / ZZ(p))
if __name__ == "__main__":
    e=3
    d0=1
    n=2333213551111419528119976503785686567161109836159361896490669798295538455404003419373195693880193950125815979488300295403091123305475537268521385036974263395844630321193114735883091647229455935840631249600221804111990915147272947074470587167340369845800749486952880641244118039836317255093953403969202588690405194976316194178748361806924568147861151165191682920007674237796434360217655447625595441843774158541359110097857268583911321136019295882974197996338374518448092192943911220197168190239799377351233681891514489152164895854084571373842818347519448837833513269813573096991008783929206576686868745312298775194503075777205612909295262149082466703873489873222965507083913287098103448238271023748799658831078762289159314694342531713683551302295107906321517074853348554840890720115172883252274353084038551648540698037440860011227673256754561366116948820073023167085986450647420641529114582236576855012243141304728685947818061
    ct=315723391463118032488018158076604414510723246392820714350471166167315793101129645329417171500176579239046271365905866797972178338019591751217565144048515173894443502095345635838053


    known_bits = 800
    print NBITS(N)
    p,q = find_pq(d0,e,N)
    print 'p =', p
    print 'q =', q
    fn = (p-1)*(q-1)
    d = pow(e,-1,fn)
    m = pow(ct,d,N)
    m = ZZ(m)
    print 'm = ' ,m
    print hex(m)[2:].decode('hex')
